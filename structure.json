{
  "dashboard.py": "import streamlit as st\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom google.oauth2 import service_account\nfrom googleapiclient.discovery import build\nimport os\nfrom datetime import datetime\nimport numpy as np\n\nclass InventarioAnalytics:\n    \"\"\"Clase de utilidad para cálculos y análisis\"\"\"\n    @staticmethod\n    def calcular_porcentaje(parte, total):\n        \"\"\"Calcula porcentaje con manejo de errores\"\"\"\n        try:\n            return round((parte / total * 100), 2) if total > 0 else 0\n        except:\n            return 0\n\n    @staticmethod\n    def formatear_numero(numero, decimales=2):\n        \"\"\"Formatea números para visualización\"\"\"\n        try:\n            if abs(numero) >= 1000000:\n                return f\"{numero/1000000:.{decimales}f}M\"\n            elif abs(numero) >= 1000:\n                return f\"{numero/1000:.{decimales}f}K\"\n            else:\n                return f\"{numero:.{decimales}f}\"\n        except:\n            return \"0\"\n\nclass InventarioDashboard:\n    def __init__(self):\n        self.SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']\n        self.SPREADSHEET_ID = '1acGspGuv-i0KSA5Q8owZpFJb1ytgm1xljBLZoa2cSN8'\n        self.RANGE_NAME = 'Carnes!A1:L'\n        self.df = None\n        self.analytics = InventarioAnalytics()\n        \n        # Configuración de colores y estilos\n        self.COLOR_SCHEME = {\n            'primary': '#1f77b4',\n            'secondary': '#ff7f0e',\n            'success': '#2ca02c',\n            'warning': '#d62728',\n            'info': '#17becf'\n        }\n        \n        # Configuración de estados\n        self.ESTADOS_STOCK = {\n            'CRÍTICO': {'umbral': 5, 'color': '#d62728'},\n            'BAJO': {'umbral': 20, 'color': '#ff7f0e'},\n            'NORMAL': {'umbral': float('inf'), 'color': '#2ca02c'}\n        }\n\n    def get_credentials(self):\n        \"\"\"Obtiene credenciales para Google Sheets API con manejo de errores mejorado\"\"\"\n        try:\n            if st.secrets.has_key(\"gcp_service_account\"):\n                credentials_dict = st.secrets[\"gcp_service_account\"]\n                creds = service_account.Credentials.from_service_account_info(\n                    credentials_dict,\n                    scopes=self.SCOPES\n                )\n                return creds\n            else:\n                # Intenta cargar credenciales locales\n                if os.path.exists('client_secret.json'):\n                    creds = service_account.Credentials.from_service_account_file(\n                        'client_secret.json',\n                        scopes=self.SCOPES\n                    )\n                    return creds\n                else:\n                    st.error(\"No se encontraron credenciales. Verifica la configuración.\")\n                    return None\n        except Exception as e:\n            st.error(f\"Error al obtener credenciales: {str(e)}\")\n            return None\n\n    def load_data(self):\n        \"\"\"Carga y preprocesa los datos con validaciones mejoradas\"\"\"\n        try:\n            creds = self.get_credentials()\n            if not creds:\n                return False\n\n            service = build('sheets', 'v4', credentials=creds)\n            sheet = service.spreadsheets()\n            result = sheet.values().get(\n                spreadsheetId=self.SPREADSHEET_ID,\n                range=self.RANGE_NAME\n            ).execute()\n            \n            values = result.get('values', [])\n            if not values:\n                st.error(\"No se encontraron datos en la hoja de cálculo\")\n                return False\n            \n            # Crear DataFrame\n            self.df = pd.DataFrame(values[1:], columns=values[0])\n            \n            # Validar columnas requeridas\n            required_columns = ['nombre', 'lote', 'movimiento', 'almacen', 'almacen actual', \n                              'cajas', 'kg', 'precio', 'precio total']\n            missing_columns = [col for col in required_columns if col not in self.df.columns]\n            if missing_columns:\n                st.error(f\"Faltan columnas requeridas: {', '.join(missing_columns)}\")\n                return False\n            \n            # Convertir y validar columnas numéricas\n            numeric_columns = ['cajas', 'kg', 'precio', 'precio total']\n            for col in numeric_columns:\n                self.df[col] = pd.to_numeric(\n                    self.df[col].replace(['', 'E', '#VALUE!', '#N/A'], '0'),\n                    errors='coerce'\n                ).fillna(0)\n            \n            # Limpiar y estandarizar datos\n            self.df['movimiento'] = self.df['movimiento'].str.upper()\n            self.df['almacen'] = self.df['almacen'].str.strip()\n            self.df['almacen actual'] = self.df['almacen actual'].str.strip()\n            \n            # Validar valores únicos esperados\n            movimientos_validos = {'ENTRADA', 'SALIDA', 'TRASPASO'}\n            movimientos_invalidos = set(self.df['movimiento'].unique()) - movimientos_validos\n            if movimientos_invalidos:\n                st.warning(f\"Se encontraron movimientos no estándar: {movimientos_invalidos}\")\n            \n            return True\n            \n        except Exception as e:\n            st.error(f\"Error durante la carga de datos: {str(e)}\")\n            return False\n    def calcular_stock_actual(self):\n        \"\"\"\n        Calcula el stock actual con análisis detallado por producto, lote y almacén\n        Incluye métricas adicionales y validaciones\n        \"\"\"\n        try:\n            stock_data = []\n            todos_productos = self.df['nombre'].unique()\n            todos_lotes = self.df['lote'].unique()\n            todos_almacenes = pd.concat([\n                self.df['almacen'],\n                self.df['almacen actual']\n            ]).unique()\n            \n            # Limpiar y validar almacenes\n            todos_almacenes = [a for a in todos_almacenes if pd.notna(a) and str(a).strip() != '']\n            \n            for producto in todos_productos:\n                for lote in todos_lotes:\n                    for almacen in todos_almacenes:\n                        # Filtrar datos relevantes\n                        df_filtrado = self.df[\n                            (self.df['nombre'] == producto) & \n                            (self.df['lote'] == lote)\n                        ]\n                        \n                        # 1. Entradas directas\n                        entradas_df = df_filtrado[\n                            (df_filtrado['movimiento'] == 'ENTRADA') & \n                            (df_filtrado['almacen'] == almacen)\n                        ]\n                        entradas = entradas_df['cajas'].sum()\n                        kg_entradas = entradas_df['kg'].sum()\n                        \n                        # 2. Traspasos recibidos\n                        traspasos_recibidos_df = df_filtrado[\n                            (df_filtrado['movimiento'] == 'TRASPASO') & \n                            (df_filtrado['almacen actual'] == almacen)\n                        ]\n                        traspasos_recibidos = traspasos_recibidos_df['cajas'].sum()\n                        kg_traspasos_recibidos = traspasos_recibidos_df['kg'].sum()\n                        \n                        # 3. Traspasos enviados\n                        traspasos_enviados_df = df_filtrado[\n                            (df_filtrado['movimiento'] == 'TRASPASO') & \n                            (df_filtrado['almacen'] == almacen)\n                        ]\n                        traspasos_enviados = traspasos_enviados_df['cajas'].sum()\n                        kg_traspasos_enviados = traspasos_enviados_df['kg'].sum()\n                        \n                        # 4. Salidas (ventas)\n                        salidas_df = df_filtrado[\n                            (df_filtrado['movimiento'] == 'SALIDA') & \n                            (df_filtrado['almacen'] == almacen)\n                        ]\n                        salidas = salidas_df['cajas'].sum()\n                        kg_salidas = salidas_df['kg'].sum()\n                        ventas_total = salidas_df['precio total'].sum()\n                        \n                        # Cálculos de stock y métricas\n                        total_inicial = entradas + traspasos_recibidos\n                        stock = total_inicial - traspasos_enviados - salidas\n                        kg_total = kg_entradas + kg_traspasos_recibidos - kg_traspasos_enviados - kg_salidas\n                        \n                        # Cálculo de porcentajes\n                        porcentaje_vendido = self.analytics.calcular_porcentaje(salidas, total_inicial)\n                        porcentaje_disponible = self.analytics.calcular_porcentaje(stock, total_inicial)\n                        \n                        # Determinar estado del stock\n                        estado_stock = 'NORMAL'\n                        for estado, config in self.ESTADOS_STOCK.items():\n                            if stock <= config['umbral']:\n                                estado_stock = estado\n                                break\n                        \n                        # Calcular métricas adicionales\n                        rotacion = self.analytics.calcular_porcentaje(salidas, total_inicial) if total_inicial > 0 else 0\n                        dias_inventario = 0  # TODO: Implementar cálculo de días de inventario\n                        \n                        # Solo agregar si hay movimientos o stock\n                        if total_inicial > 0 or stock != 0:\n                            stock_data.append({\n                                'Almacén': almacen,\n                                'Producto': producto,\n                                'Lote': lote,\n                                'Stock': stock,\n                                'Kg Total': kg_total,\n                                'Total Inicial': total_inicial,\n                                'Entradas': entradas,\n                                'Traspasos Recibidos': traspasos_recibidos,\n                                'Traspasos Enviados': traspasos_enviados,\n                                'Salidas': salidas,\n                                'Ventas Total': ventas_total,\n                                '% Vendido': porcentaje_vendido,\n                                '% Disponible': porcentaje_disponible,\n                                'Estado Stock': estado_stock,\n                                'Rotación': rotacion,\n                                'Días Inventario': dias_inventario,\n                                'Kg Entradas': kg_entradas,\n                                'Kg Traspasos Recibidos': kg_traspasos_recibidos,\n                                'Kg Traspasos Enviados': kg_traspasos_enviados,\n                                'Kg Salidas': kg_salidas\n                            })\n            \n            # Convertir a DataFrame y validar resultados\n            stock_df = pd.DataFrame(stock_data)\n            if stock_df.empty:\n                st.warning(\"No se encontraron datos de stock para mostrar\")\n                return pd.DataFrame()\n                \n            # Ordenar y limpiar datos\n            stock_df = stock_df.sort_values(['Almacén', 'Producto', 'Lote'])\n            stock_df = stock_df.round(2)\n            \n            return stock_df\n            \n        except Exception as e:\n            st.error(f\"Error en el cálculo de stock: {str(e)}\")\n            return pd.DataFrame()\n\n    def calcular_metricas_generales(self, stock_df):\n        \"\"\"Calcula métricas generales del inventario\"\"\"\n        try:\n            metricas = {\n                'Total Productos': len(stock_df['Producto'].unique()),\n                'Total Almacenes': len(stock_df['Almacén'].unique()),\n                'Total Lotes': len(stock_df['Lote'].unique()),\n                'Total Cajas en Stock': stock_df['Stock'].sum(),\n                'Total Kg en Stock': stock_df['Kg Total'].sum(),\n                'Total Ventas ($)': stock_df['Ventas Total'].sum(),\n                'Productos en Estado Crítico': len(stock_df[stock_df['Estado Stock'] == 'CRÍTICO']),\n                'Rotación Promedio (%)': stock_df['Rotación'].mean()\n            }\n            \n            return metricas\n            \n        except Exception as e:\n            st.error(f\"Error en el cálculo de métricas generales: {str(e)}\")\n            return {}\n    def generar_grafico_stock(self, stock_df, tipo='barras', titulo='', filtro=None):\n        \"\"\"Genera gráficos personalizados para el análisis de stock\"\"\"\n        try:\n            if stock_df.empty:\n                return None\n\n            if filtro:\n                stock_df = stock_df[filtro]\n\n            if tipo == 'barras':\n                fig = px.bar(\n                    stock_df,\n                    x='Producto',\n                    y='Stock',\n                    color='Estado Stock',\n                    color_discrete_map={\n                        'CRÍTICO': self.ESTADOS_STOCK['CRÍTICO']['color'],\n                        'BAJO': self.ESTADOS_STOCK['BAJO']['color'],\n                        'NORMAL': self.ESTADOS_STOCK['NORMAL']['color']\n                    },\n                    title=titulo\n                )\n                fig.update_layout(\n                    xaxis_tickangle=-45,\n                    height=500,\n                    showlegend=True,\n                    legend_title_text='Estado de Stock'\n                )\n            \n            elif tipo == 'pie':\n                fig = px.pie(\n                    stock_df,\n                    values='Stock',\n                    names='Almacén',\n                    title=titulo\n                )\n                fig.update_traces(textposition='inside', textinfo='percent+label')\n            \n            elif tipo == 'treemap':\n                fig = px.treemap(\n                    stock_df,\n                    path=['Almacén', 'Producto'],\n                    values='Stock',\n                    color='Estado Stock',\n                    color_discrete_map={\n                        'CRÍTICO': self.ESTADOS_STOCK['CRÍTICO']['color'],\n                        'BAJO': self.ESTADOS_STOCK['BAJO']['color'],\n                        'NORMAL': self.ESTADOS_STOCK['NORMAL']['color']\n                    },\n                    title=titulo\n                )\n            \n            return fig\n\n        except Exception as e:\n            st.error(f\"Error al generar gráfico: {str(e)}\")\n            return None\n\n    def vista_comercial(self):\n        \"\"\"Vista específica para el equipo comercial con análisis detallado\"\"\"\n        st.subheader(\"Vista Comercial - Análisis de Stock y Ventas\")\n        \n        # Obtener datos de stock\n        stock_df = self.calcular_stock_actual()\n        if stock_df.empty:\n            st.warning(\"No hay datos disponibles para mostrar\")\n            return\n\n        # Filtros superiores\n        col1, col2, col3 = st.columns(3)\n        with col1:\n            lote_filter = st.multiselect(\n                \"Filtrar por Lote\",\n                options=sorted(stock_df['Lote'].unique()),\n                key=\"comercial_lote_filter\"\n            )\n        with col2:\n            almacen_filter = st.multiselect(\n                \"Filtrar por Almacén\",\n                options=sorted(stock_df['Almacén'].unique()),\n                key=\"comercial_almacen_filter\"\n            )\n        with col3:\n            estado_filter = st.multiselect(\n                \"Filtrar por Estado\",\n                options=sorted(stock_df['Estado Stock'].unique()),\n                key=\"comercial_estado_filter\"\n            )\n\n        # Aplicar filtros\n        df_filtered = stock_df.copy()\n        if lote_filter:\n            df_filtered = df_filtered[df_filtered['Lote'].isin(lote_filter)]\n        if almacen_filter:\n            df_filtered = df_filtered[df_filtered['Almacén'].isin(almacen_filter)]\n        if estado_filter:\n            df_filtered = df_filtered[df_filtered['Estado Stock'].isin(estado_filter)]\n\n        # Tabs para diferentes vistas\n        tab1, tab2, tab3 = st.tabs([\"Resumen General\", \"Análisis por Producto\", \"Análisis por Almacén\"])\n\n        with tab1:\n            # Métricas principales\n            metricas = self.calcular_metricas_generales(df_filtered)\n            col1, col2, col3, col4 = st.columns(4)\n            \n            with col1:\n                st.metric(\n                    \"Total Cajas en Stock\",\n                    f\"{metricas['Total Cajas en Stock']:,.0f}\",\n                    delta=None\n                )\n            with col2:\n                st.metric(\n                    \"Total Kg en Stock\",\n                    f\"{metricas['Total Kg en Stock']:,.2f}\",\n                    delta=None\n                )\n            with col3:\n                st.metric(\n                    \"Productos en Estado Crítico\",\n                    f\"{metricas['Productos en Estado Crítico']}\",\n                    delta=None\n                )\n            with col4:\n                st.metric(\n                    \"Rotación Promedio\",\n                    f\"{metricas['Rotación Promedio (%)']:.1f}%\",\n                    delta=None\n                )\n\n            # Gráficos de resumen\n            col1, col2 = st.columns(2)\n            with col1:\n                fig_stock = self.generar_grafico_stock(\n                    df_filtered,\n                    tipo='barras',\n                    titulo='Stock por Producto y Estado'\n                )\n                if fig_stock:\n                    st.plotly_chart(fig_stock, use_container_width=True)\n\n            with col2:\n                fig_dist = self.generar_grafico_stock(\n                    df_filtered,\n                    tipo='treemap',\n                    titulo='Distribución de Stock por Almacén y Producto'\n                )\n                if fig_dist:\n                    st.plotly_chart(fig_dist, use_container_width=True)\n\n        with tab2:\n            # Análisis por Producto\n            st.markdown(\"### Análisis Detallado por Producto\")\n            \n            # Selector de producto\n            producto_seleccionado = st.selectbox(\n                \"Seleccionar Producto\",\n                options=sorted(df_filtered['Producto'].unique()),\n                key=\"comercial_producto_selector\"\n            )\n            \n            if producto_seleccionado:\n                df_producto = df_filtered[df_filtered['Producto'] == producto_seleccionado]\n                \n                # Métricas del producto\n                col1, col2, col3, col4 = st.columns(4)\n                with col1:\n                    st.metric(\n                        \"Stock Total\",\n                        f\"{df_producto['Stock'].sum():,.0f} cajas\",\n                        delta=None\n                    )\n                with col2:\n                    st.metric(\n                        \"Kg Totales\",\n                        f\"{df_producto['Kg Total'].sum():,.2f} kg\",\n                        delta=None\n                    )\n                with col3:\n                    ventas_totales = df_producto['Ventas Total'].sum()\n                    st.metric(\n                        \"Ventas Totales\",\n                        f\"${ventas_totales:,.0f}\",\n                        delta=None\n                    )\n                with col4:\n                    rotacion_promedio = df_producto['Rotación'].mean()\n                    st.metric(\n                        \"Rotación\",\n                        f\"{rotacion_promedio:.1f}%\",\n                        delta=None\n                    )\n                \n                # Detalle por almacén y lote\n                st.markdown(\"#### Detalle por Almacén y Lote\")\n                detalle_cols = ['Almacén', 'Lote', 'Stock', 'Kg Total', 'Total Inicial', \n                              'Salidas', '% Vendido', '% Disponible', 'Estado Stock']\n                st.dataframe(\n                    df_producto[detalle_cols].sort_values(['Almacén', 'Lote']),\n                    use_container_width=True\n                )\n                \n                # Gráficos de análisis\n                col1, col2 = st.columns(2)\n                with col1:\n                    # Distribución por almacén\n                    fig_dist_almacen = px.pie(\n                        df_producto,\n                        values='Stock',\n                        names='Almacén',\n                        title=f\"Distribución de Stock por Almacén - {producto_seleccionado}\"\n                    )\n                    st.plotly_chart(fig_dist_almacen, use_container_width=True)\n                \n                with col2:\n                    # Evolución de ventas y stock\n                    fig_evolucion = px.bar(\n                        df_producto,\n                        x='Lote',\n                        y=['Stock', 'Salidas'],\n                        title=f\"Stock vs Salidas por Lote - {producto_seleccionado}\",\n                        barmode='group'\n                    )\n                    st.plotly_chart(fig_evolucion, use_container_width=True)\n\n        with tab3:\n            # Análisis por Almacén\n            st.markdown(\"### Análisis Detallado por Almacén\")\n            \n            # Selector de almacén\n            almacen_seleccionado = st.selectbox(\n                \"Seleccionar Almacén\",\n                options=sorted(df_filtered['Almacén'].unique()),\n                key=\"comercial_almacen_selector\"\n            )\n            \n            if almacen_seleccionado:\n                df_almacen = df_filtered[df_filtered['Almacén'] == almacen_seleccionado]\n                \n                # Métricas del almacén\n                col1, col2, col3 = st.columns(3)\n                with col1:\n                    st.metric(\n                        \"Total Productos\",\n                        f\"{len(df_almacen['Producto'].unique())}\",\n                        delta=None\n                    )\n                with col2:\n                    st.metric(\n                        \"Stock Total\",\n                        f\"{df_almacen['Stock'].sum():,.0f} cajas\",\n                        delta=None\n                    )\n                with col3:\n                    st.metric(\n                        \"Productos Críticos\",\n                        f\"{len(df_almacen[df_almacen['Estado Stock'] == 'CRÍTICO'])}\",\n                        delta=None\n                    )\n                \n                # Análisis de stock\n                st.markdown(\"#### Estado de Stock por Producto\")\n                \n                # Crear tabla de resumen\n                resumen_stock = df_almacen.groupby('Producto').agg({\n                    'Stock': 'sum',\n                    'Kg Total': 'sum',\n                    'Total Inicial': 'sum',\n                    'Salidas': 'sum',\n                    '% Vendido': 'mean',\n                    '% Disponible': 'mean'\n                }).round(2)\n                \n                # Agregar estado de stock\n                def determinar_estado(stock):\n                    for estado, config in self.ESTADOS_STOCK.items():\n                        if stock <= config['umbral']:\n                            return estado\n                    return 'NORMAL'\n                \n                resumen_stock['Estado'] = resumen_stock['Stock'].apply(determinar_estado)\n                \n                # Mostrar resumen\n                st.dataframe(\n                    resumen_stock.sort_values('Stock', ascending=False),\n                    use_container_width=True\n                )\n                \n                # Gráficos de análisis\n                col1, col2 = st.columns(2)\n                with col1:\n                    # Stock por producto\n                    fig_stock = px.bar(\n                        df_almacen,\n                        x='Producto',\n                        y='Stock',\n                        color='Estado Stock',\n                        title=f\"Stock por Producto - {almacen_seleccionado}\"\n                    )\n                    fig_stock.update_layout(xaxis_tickangle=-45)\n                    st.plotly_chart(fig_stock, use_container_width=True)\n                \n                with col2:\n                    # Distribución de estados\n                    fig_estados = px.pie(\n                        df_almacen,\n                        names='Estado Stock',\n                        values='Stock',\n                        title=f\"Distribución por Estado de Stock - {almacen_seleccionado}\"\n                    )\n                    st.plotly_chart(fig_estados, use_container_width=True)\n    def ventas_view(self):\n        \"\"\"Vista detallada de ventas y análisis comercial\"\"\"\n        st.subheader(\"Análisis de Ventas\")\n        \n        # Filtrar solo ventas con precio\n        ventas = self.df[self.df['movimiento'] == 'SALIDA'].copy()\n        ventas = ventas[ventas['precio'] > 0]\n\n        if ventas.empty:\n            st.warning(\"No hay datos de ventas disponibles\")\n            return\n\n        # Crear tabs para diferentes vistas\n        tab1, tab2, tab3 = st.tabs([\"Resumen de Ventas\", \"Análisis por Cliente\", \"Detalle de Ventas\"])\n        \n        with tab1:\n            # Métricas principales de ventas\n            total_ventas = ventas['precio total'].sum()\n            total_kg = ventas['kg'].sum()\n            total_cajas = ventas['cajas'].sum()\n            precio_promedio = total_ventas / total_kg if total_kg > 0 else 0\n            \n            col1, col2, col3, col4 = st.columns(4)\n            with col1:\n                st.metric(\"Total Ventas\", f\"${total_ventas:,.0f}\")\n            with col2:\n                st.metric(\"Total Kg Vendidos\", f\"{total_kg:,.2f}\")\n            with col3:\n                st.metric(\"Total Cajas Vendidas\", f\"{total_cajas:,.0f}\")\n            with col4:\n                st.metric(\"Precio Promedio/Kg\", f\"${precio_promedio:,.2f}\")\n\n            # Análisis por producto\n            col1, col2 = st.columns(2)\n            with col1:\n                st.markdown(\"### Top Ventas por Monto\")\n                ventas_producto = ventas.groupby(['nombre', 'lote']).agg({\n                    'cajas': 'sum',\n                    'kg': 'sum',\n                    'precio total': 'sum'\n                }).round(2)\n                ventas_producto = ventas_producto.sort_values('precio total', ascending=False)\n                \n                # Calcular porcentajes\n                ventas_producto['% del Total'] = (ventas_producto['precio total'] / total_ventas * 100).round(2)\n                ventas_producto['Precio/Kg'] = (ventas_producto['precio total'] / ventas_producto['kg']).round(2)\n                \n                st.dataframe(ventas_producto, use_container_width=True)\n\n            with col2:\n                # Gráfico de distribución de ventas\n                fig = px.pie(\n                    ventas_producto.reset_index(),\n                    values='precio total',\n                    names='nombre',\n                    title=\"Distribución de Ventas por Producto\"\n                )\n                fig.update_traces(textposition='inside', textinfo='percent+label')\n                st.plotly_chart(fig, use_container_width=True)\n\n        with tab2:\n            st.markdown(\"### Análisis por Cliente\")\n            \n            # Resumen por cliente\n            ventas_cliente = ventas.groupby('cliente').agg({\n                'cajas': 'sum',\n                'kg': 'sum',\n                'precio total': 'sum'\n            }).round(2)\n            \n            # Calcular métricas adicionales\n            ventas_cliente['% del Total'] = (ventas_cliente['precio total'] / total_ventas * 100).round(2)\n            ventas_cliente['Precio/Kg'] = (ventas_cliente['precio total'] / ventas_cliente['kg']).round(2)\n            ventas_cliente = ventas_cliente.sort_values('precio total', ascending=False)\n            \n            # Mostrar resumen\n            st.markdown(\"#### Resumen de Ventas por Cliente\")\n            st.dataframe(ventas_cliente, use_container_width=True)\n            \n            # Selector de cliente para detalle\n            cliente_seleccionado = st.selectbox(\n                \"Seleccionar Cliente para ver detalle\",\n                options=sorted(ventas['cliente'].unique()),\n                key=\"ventas_cliente_selector\"\n            )\n            \n            if cliente_seleccionado:\n                st.markdown(f\"#### Detalle de Ventas - {cliente_seleccionado}\")\n                ventas_detalle = ventas[ventas['cliente'] == cliente_seleccionado]\n                \n                # Resumen por producto para el cliente seleccionado\n                detalle_cliente = ventas_detalle.groupby(['nombre', 'lote']).agg({\n                    'cajas': 'sum',\n                    'kg': 'sum',\n                    'precio total': 'sum',\n                    'precio': 'mean'\n                }).round(2)\n                \n                st.dataframe(detalle_cliente.sort_values('precio total', ascending=False))\n                \n                # Gráficos de análisis\n                col1, col2 = st.columns(2)\n                with col1:\n                    fig = px.pie(\n                        detalle_cliente.reset_index(),\n                        values='precio total',\n                        names='nombre',\n                        title=f\"Distribución de Compras - {cliente_seleccionado}\"\n                    )\n                    st.plotly_chart(fig, use_container_width=True)\n                \n                with col2:\n                    fig = px.bar(\n                        detalle_cliente.reset_index(),\n                        x='nombre',\n                        y=['cajas', 'kg'],\n                        title=f\"Cantidades por Producto - {cliente_seleccionado}\",\n                        barmode='group'\n                    )\n                    fig.update_layout(xaxis_tickangle=-45)\n                    st.plotly_chart(fig, use_container_width=True)\n\n        with tab3:\n            st.markdown(\"### Detalle de Ventas\")\n            \n            # Filtros\n            col1, col2, col3 = st.columns(3)\n            with col1:\n                cliente_filter = st.multiselect(\n                    \"Filtrar por Cliente\",\n                    options=sorted(ventas['cliente'].unique()),\n                    key=\"ventas_cliente_filter\"\n                )\n            with col2:\n                producto_filter = st.multiselect(\n                    \"Filtrar por Producto\",\n                    options=sorted(ventas['nombre'].unique()),\n                    key=\"ventas_producto_filter\"\n                )\n            with col3:\n                vendedor_filter = st.multiselect(\n                    \"Filtrar por Vendedor\",\n                    options=sorted([v for v in ventas['vendedor'].unique() if str(v).strip()]),\n                    key=\"ventas_vendedor_filter\"\n                )\n            \n            # Aplicar filtros\n            ventas_filtradas = ventas.copy()\n            if cliente_filter:\n                ventas_filtradas = ventas_filtradas[ventas_filtradas['cliente'].isin(cliente_filter)]\n            if producto_filter:\n                ventas_filtradas = ventas_filtradas[ventas_filtradas['nombre'].isin(producto_filter)]\n            if vendedor_filter:\n                ventas_filtradas = ventas_filtradas[ventas_filtradas['vendedor'].isin(vendedor_filter)]\n            \n            # Mostrar detalle\n            st.dataframe(\n                ventas_filtradas[[\n                    'nombre', 'lote', 'cliente', 'vendedor', 'cajas', 'kg', \n                    'precio', 'precio total'\n                ]].sort_values(['cliente', 'nombre']),\n                use_container_width=True\n            )\n\n    def run_dashboard(self):\n        \"\"\"Función principal para ejecutar el dashboard\"\"\"\n        st.set_page_config(page_title=\"Inventario COHESA\", layout=\"wide\")\n        st.title(\"Dashboard de Inventario COHESA\")\n\n        # Información de actualización y botón de recarga\n        col1, col2 = st.sidebar.columns([2,1])\n        with col1:\n            st.write(\"Última actualización:\", datetime.now().strftime(\"%H:%M:%S\"))\n        with col2:\n            if st.button('🔄 Actualizar', key=\"refresh_button\"):\n                st.cache_data.clear()\n                st.experimental_rerun()\n\n        if not self.load_data():\n            st.error(\"Error al cargar los datos\")\n            return\n\n        # Tabs principales\n        tab1, tab2, tab3 = st.tabs([\"Stock\", \"Ventas\", \"Vista Comercial\"])\n        \n        with tab1:\n            self.stock_view()\n        \n        with tab2:\n            self.ventas_view()\n        \n        with tab3:\n            self.vista_comercial()\n\nif __name__ == '__main__':\n    dashboard = InventarioDashboard()\n    dashboard.run_dashboard()\n",
  "requirements.txt": "streamlit\npandas\nplotly\ngoogle-api-python-client\ngoogle-auth-httplib2\ngoogle-auth-oauthlib"
}