{
  "dashboard.py": "import streamlit as st\n# Configuraci√≥n de la p√°gina - DEBE SER LA PRIMERA L√çNEA DE STREAMLIT\nst.set_page_config(\n    page_title=\"Inventario COHESA\",\n    page_icon=\"üì¶\",\n    layout=\"wide\",\n    initial_sidebar_state=\"expanded\"\n)\n\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom google.oauth2 import service_account\nfrom googleapiclient.discovery import build\nimport os\nfrom datetime import datetime\nimport numpy as np\n\n# -----------------------------------------------------------------------------\n#                               Estilos CSS\n# -----------------------------------------------------------------------------\nst.markdown(\"\"\"\n    <style>\n    .main {\n        padding: 1rem 1rem;\n    }\n    .stTabs [data-baseweb=\"tab-list\"] {\n        gap: 24px;\n    }\n    .stTabs [data-baseweb=\"tab\"] {\n        height: 50px;\n        padding-left: 20px;\n        padding-right: 20px;\n    }\n    .stTabs [data-baseweb=\"tab-list\"] button {\n        font-size: 16px;\n    }\n    .metric-card {\n        background-color: #f8f9fa;\n        border-radius: 10px;\n        padding: 15px;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n    .st-emotion-cache-1wivap2 {\n        background-color: #ffffff;\n        border-radius: 5px;\n        padding: 1rem;\n        box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n    }\n    h1 {\n        color: #1f77b4;\n        font-weight: bold;\n        padding: 1rem 0;\n    }\n    h2, h3 {\n        color: #2c3e50;\n        padding: 0.5rem 0;\n    }\n    .stAlert {\n        border-radius: 5px;\n    }\n    </style>\n    \"\"\", unsafe_allow_html=True)\n\n# -----------------------------------------------------------------------------\n#       1) Funci√≥n externa cacheada para cargar datos desde Google Sheets\n# -----------------------------------------------------------------------------\n@st.cache_data\ndef load_data_from_sheets(spreadsheet_id: str, range_name: str) -> pd.DataFrame:\n    \"\"\"\n    Carga datos desde Google Sheets y retorna un DataFrame.\n    Vive fuera de la clase para evitar UnhashableParamError.\n    \"\"\"\n    if \"gcp_service_account\" not in st.secrets:\n        st.error(\"No se encontraron credenciales en st.secrets (gcp_service_account).\")\n        return pd.DataFrame()\n\n    credentials_dict = st.secrets[\"gcp_service_account\"]\n    creds = service_account.Credentials.from_service_account_info(\n        credentials_dict,\n        scopes=[\"https://www.googleapis.com/auth/spreadsheets.readonly\"]\n    )\n\n    service = build(\"sheets\", \"v4\", credentials=creds)\n    sheet = service.spreadsheets()\n\n    result = sheet.values().get(\n        spreadsheetId=spreadsheet_id,\n        range=range_name\n    ).execute()\n    values = result.get('values', [])\n    if not values:\n        return pd.DataFrame()\n\n    df = pd.DataFrame(values[1:], columns=values[0])\n    return df\n\n# -----------------------------------------------------------------------------\n#        2) Clase de utilidades: c√°lculos de porcentajes, formateos, etc.\n# -----------------------------------------------------------------------------\nclass InventarioAnalytics:\n    @staticmethod\n    def calcular_porcentaje(parte, total):\n        \"\"\"Calcula porcentaje con manejo de errores.\"\"\"\n        try:\n            return round((parte / total * 100), 2) if total > 0 else 0\n        except:\n            return 0\n\n    @staticmethod\n    def formatear_numero(numero, decimales=2):\n        \"\"\"Formatea n√∫meros (ej: 1000 => 1K, 1,000,000 => 1M).\"\"\"\n        try:\n            if abs(numero) >= 1_000_000:\n                return f\"{numero/1_000_000:.{decimales}f}M\"\n            elif abs(numero) >= 1_000:\n                return f\"{numero/1_000:.{decimales}f}K\"\n            else:\n                return f\"{numero:.{decimales}f}\"\n        except:\n            return \"0\"\n\n# -----------------------------------------------------------------------------\n#        3) Clase principal del Dashboard\n# -----------------------------------------------------------------------------\nclass InventarioDashboard:\n    def __init__(self):\n        self.SPREADSHEET_ID = \"1acGspGuv-i0KSA5Q8owZpFJb1ytgm1xljBLZoa2cSN8\"\n        self.RANGE_NAME = \"Carnes!A1:L\"\n        self.df = pd.DataFrame()\n        self.analytics = InventarioAnalytics()\n\n        self.COLOR_SCHEME = {\n            'primary': '#1f77b4',\n            'secondary': '#ff7f0e',\n            'success': '#2ecc71',\n            'warning': '#e74c3c',\n            'info': '#3498db',\n            'background': '#f8f9fa',\n            'text': '#2c3e50'\n        }\n\n        self.ESTADOS_STOCK = {\n            'CR√çTICO': {'umbral': 5, 'color': '#e74c3c'},\n            'BAJO': {'umbral': 20, 'color': '#f39c12'},\n            'NORMAL': {'umbral': float('inf'), 'color': '#2ecc71'}\n        }\n\n    def load_data(self) -> bool:\n        with st.spinner(\"Cargando datos...\"):\n            df_tmp = load_data_from_sheets(self.SPREADSHEET_ID, self.RANGE_NAME)\n            if df_tmp.empty:\n                st.error(\"üìä No se encontraron datos en la hoja de c√°lculo.\")\n                return False\n\n            required_columns = [\n                'nombre', 'lote', 'movimiento', 'almacen',\n                'almacen actual', 'cajas', 'kg', 'precio', 'precio total'\n            ]\n            missing_cols = [c for c in required_columns if c not in df_tmp.columns]\n            if missing_cols:\n                st.error(f\"‚ùå Faltan columnas requeridas: {missing_cols}\")\n                return False\n\n            numeric_cols = ['cajas', 'kg', 'precio', 'precio total']\n            for col in numeric_cols:\n                df_tmp[col] = pd.to_numeric(\n                    df_tmp[col].replace(['', 'E', '#VALUE!', '#N/A'], '0'),\n                    errors='coerce'\n                ).fillna(0)\n\n            df_tmp['movimiento'] = df_tmp['movimiento'].str.upper().fillna('')\n            df_tmp['almacen'] = df_tmp['almacen'].str.strip().fillna('')\n            df_tmp['almacen actual'] = df_tmp['almacen actual'].str.strip().fillna('')\n\n            self.df = df_tmp\n            st.success(\"‚úÖ Datos cargados exitosamente\")\n            return True\n    def calcular_stock_actual(self) -> pd.DataFrame:\n        try:\n            if self.df.empty:\n                return pd.DataFrame()\n\n            with st.spinner('Calculando stock actual...'):\n                stock_data = []\n\n                productos = self.df['nombre'].unique()\n                lotes = self.df['lote'].unique()\n                almacenes = pd.concat([\n                    self.df['almacen'], self.df['almacen actual']\n                ]).unique()\n                almacenes = [a for a in almacenes if pd.notna(a) and str(a).strip() != '']\n\n                total_items = len(productos)*len(lotes)*len(almacenes)\n                progress_bar = st.progress(0)\n                current_item = 0\n\n                for prod in productos:\n                    for lote in lotes:\n                        for alm in almacenes:\n                            current_item += 1\n                            progress_bar.progress(current_item / total_items)\n\n                            df_fil = self.df[(self.df['nombre'] == prod) & (self.df['lote'] == lote)]\n\n                            df_ent = df_fil[(df_fil['movimiento'] == 'ENTRADA') & (df_fil['almacen'] == alm)]\n                            entradas = df_ent['cajas'].sum()\n                            kg_entradas = df_ent['kg'].sum()\n\n                            df_t_rec = df_fil[(df_fil['movimiento'] == 'TRASPASO') & (df_fil['almacen actual'] == alm)]\n                            tr_rec = df_t_rec['cajas'].sum()\n                            kg_t_rec = df_t_rec['kg'].sum()\n\n                            df_t_env = df_fil[(df_fil['movimiento'] == 'TRASPASO') & (df_fil['almacen'] == alm)]\n                            tr_env = df_t_env['cajas'].sum()\n                            kg_t_env = df_t_env['kg'].sum()\n\n                            df_sal = df_fil[(df_fil['movimiento'] == 'SALIDA') & (df_fil['almacen'] == alm)]\n                            salidas = df_sal['cajas'].sum()\n                            kg_sal = df_sal['kg'].sum()\n                            ventas_total = df_sal['precio total'].sum()\n\n                            total_inicial = entradas + tr_rec\n                            stock = total_inicial - tr_env - salidas\n                            kg_total = kg_entradas + kg_t_rec - kg_t_env - kg_sal\n\n                            pct_vendido = self.analytics.calcular_porcentaje(salidas, total_inicial)\n                            pct_disp = self.analytics.calcular_porcentaje(stock, total_inicial)\n                            rotacion = pct_vendido\n\n                            estado = 'NORMAL'\n                            for est, config in self.ESTADOS_STOCK.items():\n                                if stock <= config['umbral']:\n                                    estado = est\n                                    break\n\n                            if total_inicial > 0 or stock != 0:\n                                stock_data.append({\n                                    'Almac√©n': alm,\n                                    'Producto': prod,\n                                    'Lote': lote,\n                                    'Stock': stock,\n                                    'Kg Total': kg_total,\n                                    'Total Inicial': total_inicial,\n                                    'Entradas': entradas,\n                                    'Traspasos Recibidos': tr_rec,\n                                    'Traspasos Enviados': tr_env,\n                                    'Salidas': salidas,\n                                    'Ventas Total': ventas_total,\n                                    '% Vendido': pct_vendido,\n                                    '% Disponible': pct_disp,\n                                    'Estado Stock': estado,\n                                    'Rotaci√≥n': rotacion\n                                })\n\n                progress_bar.empty()\n\n                stock_df = pd.DataFrame(stock_data).round(2)\n                if stock_df.empty:\n                    st.warning(\"üìä No se encontraron datos de stock para mostrar\")\n                return stock_df\n        except Exception as e:\n            st.error(f\"‚ùå Error en el c√°lculo de stock: {str(e)}\")\n            return pd.DataFrame()\n\n    def calcular_metricas_generales(self, stock_df: pd.DataFrame) -> dict:\n        if stock_df.empty:\n            return {\n                'Total Productos': 0,\n                'Total Almacenes': 0,\n                'Total Lotes': 0,\n                'Total Cajas en Stock': 0,\n                'Total Kg en Stock': 0,\n                'Total Ventas ($)': 0,\n                'Productos en Estado Cr√≠tico': 0,\n                'Rotaci√≥n Promedio (%)': 0\n            }\n        try:\n            return {\n                'Total Productos': len(stock_df['Producto'].unique()),\n                'Total Almacenes': len(stock_df['Almac√©n'].unique()),\n                'Total Lotes': len(stock_df['Lote'].unique()),\n                'Total Cajas en Stock': stock_df['Stock'].sum(),\n                'Total Kg en Stock': stock_df['Kg Total'].sum(),\n                'Total Ventas ($)': stock_df['Ventas Total'].sum(),\n                'Productos en Estado Cr√≠tico': len(stock_df[stock_df['Estado Stock'] == 'CR√çTICO']),\n                'Rotaci√≥n Promedio (%)': stock_df['Rotaci√≥n'].mean()\n            }\n        except Exception as e:\n            st.error(f\"Error c√°lculo m√©tricas generales: {e}\")\n            return {}\n\n    def mostrar_metricas(self, metricas: dict, columnas=4):\n        cols = st.columns(columnas)\n        i = 0\n        for titulo, valor in metricas.items():\n            with cols[i % columnas]:\n                if isinstance(valor, float):\n                    valor_str = f\"{valor:,.2f}\"\n                else:\n                    valor_str = f\"{valor}\"\n                st.markdown(f\"\"\"\n                    <div class=\"metric-card\">\n                        <h4 style=\"color: {self.COLOR_SCHEME['text']}; margin-bottom: 8px;\">\n                            {titulo}\n                        </h4>\n                        <p style=\"font-size: 24px; font-weight: bold; color: {self.COLOR_SCHEME['primary']}; margin: 0;\">\n                            {valor_str}\n                        </p>\n                    </div>\n                    \"\"\", unsafe_allow_html=True)\n            i += 1\n    def generar_grafico_stock(self, stock_df: pd.DataFrame, tipo='barras', titulo='', key_suffix=''):\n        if stock_df.empty:\n            return None\n\n        layout_config = {\n            'paper_bgcolor': 'rgba(0,0,0,0)',\n            'plot_bgcolor': 'rgba(0,0,0,0)',\n            'font': {'color': self.COLOR_SCHEME['text']},\n            'title': {\n                'text': titulo,\n                'font': {'size': 20, 'color': self.COLOR_SCHEME['text']},\n                'x': 0.5, 'xanchor': 'center'\n            },\n            'showlegend': True,\n            'legend': {'bgcolor': 'rgba(255,255,255,0.8)'}\n        }\n\n        if tipo == 'barras':\n            fig = px.bar(\n                stock_df,\n                x='Producto',\n                y='Stock',\n                color='Estado Stock',\n                color_discrete_map={\n                    'CR√çTICO': self.ESTADOS_STOCK['CR√çTICO']['color'],\n                    'BAJO': self.ESTADOS_STOCK['BAJO']['color'],\n                    'NORMAL': self.ESTADOS_STOCK['NORMAL']['color']\n                }\n            )\n            fig.update_layout(**layout_config, xaxis_tickangle=-45, height=500, bargap=0.2)\n\n        elif tipo == 'pie':\n            fig = px.pie(\n                stock_df,\n                values='Stock',\n                names='Almac√©n'\n            )\n            fig.update_traces(textposition='inside', textinfo='percent+label', hole=0.4)\n            fig.update_layout(**layout_config)\n\n        elif tipo == 'treemap':\n            fig = px.treemap(\n                stock_df,\n                path=['Almac√©n', 'Producto'],\n                values='Stock',\n                color='Estado Stock',\n                color_discrete_map={\n                    'CR√çTICO': self.ESTADOS_STOCK['CR√çTICO']['color'],\n                    'BAJO': self.ESTADOS_STOCK['BAJO']['color'],\n                    'NORMAL': self.ESTADOS_STOCK['NORMAL']['color']\n                }\n            )\n            fig.update_layout(**layout_config)\n\n        else:\n            return None\n\n        return fig\n\n    def generar_grafico_entradas_vs_salidas(self, stock_df: pd.DataFrame, key_suffix=''):\n        if stock_df.empty:\n            st.warning(\"No hay datos para Entradas vs. Salidas\")\n            return\n\n        df_group = stock_df.groupby('Producto').agg({\n            'Entradas': 'sum',\n            'Salidas': 'sum',\n            'Total Inicial': 'sum'\n        }).reset_index()\n\n        df_group['% Vendido'] = df_group.apply(\n            lambda row: self.analytics.calcular_porcentaje(row['Salidas'], row['Total Inicial']),\n            axis=1\n        )\n\n        fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n        fig.add_trace(\n            go.Bar(\n                x=df_group['Producto'],\n                y=df_group['Entradas'],\n                name='Entradas',\n                marker_color=self.COLOR_SCHEME['success']\n            ),\n            secondary_y=False\n        )\n        fig.add_trace(\n            go.Bar(\n                x=df_group['Producto'],\n                y=df_group['Salidas'],\n                name='Salidas',\n                marker_color=self.COLOR_SCHEME['warning']\n            ),\n            secondary_y=False\n        )\n        fig.add_trace(\n            go.Scatter(\n                x=df_group['Producto'],\n                y=df_group['% Vendido'],\n                name='% Vendido',\n                mode='lines+markers',\n                marker_color=self.COLOR_SCHEME['primary']\n            ),\n            secondary_y=True\n        )\n\n        fig.update_layout(\n            title_text=\"Entradas vs. Salidas y % Vendido\",\n            legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1),\n            xaxis=dict(title=\"Producto\", tickangle=-45),\n            yaxis=dict(title=\"Cajas\"),\n            yaxis2=dict(title=\"% Vendido\", overlaying='y', side='right'),\n            hovermode=\"x unified\",\n            plot_bgcolor='white'\n        )\n        st.plotly_chart(fig, use_container_width=True, key=f\"entradas_salidas_{key_suffix}\")\n\n    def stock_view(self):\n        st.markdown(f\"<h2 style='color: {self.COLOR_SCHEME['text']}; margin-bottom: 20px;'>üìä Vista General de Stock</h2>\", \n                    unsafe_allow_html=True)\n\n        stock_df = self.calcular_stock_actual()\n        if stock_df.empty:\n            st.warning(\"‚ö†Ô∏è No hay datos disponibles para mostrar\")\n            return\n\n        st.markdown(\"### üîç Filtros\")\n        col1, col2, col3 = st.columns(3)\n        with col1:\n            lote_filter = st.multiselect(\n                \"Filtrar por Lote\",\n                options=sorted(stock_df['Lote'].unique()),\n                key=\"stock_lote_filter\"\n            )\n        with col2:\n            almacen_filter = st.multiselect(\n                \"Filtrar por Almac√©n\",\n                options=sorted(stock_df['Almac√©n'].unique()),\n                key=\"stock_almacen_filter\"\n            )\n        with col3:\n            estado_filter = st.multiselect(\n                \"Filtrar por Estado\",\n                options=sorted(stock_df['Estado Stock'].unique()),\n                key=\"stock_estado_filter\"\n            )\n\n        df_filtered = stock_df.copy()\n        if lote_filter:\n            df_filtered = df_filtered[df_filtered['Lote'].isin(lote_filter)]\n        if almacen_filter:\n            df_filtered = df_filtered[df_filtered['Almac√©n'].isin(almacen_filter)]\n        if estado_filter:\n            df_filtered = df_filtered[df_filtered['Estado Stock'].isin(estado_filter)]\n\n        st.markdown(\"### üìà M√©tricas Principales\")\n        metricas = self.calcular_metricas_generales(df_filtered)\n        self.mostrar_metricas(metricas)\n\n        st.markdown(\"### üìä An√°lisis Visual\")\n        col1, col2 = st.columns(2)\n        with col1:\n            fig_stock = self.generar_grafico_stock(\n                df_filtered, tipo='barras', titulo='Stock por Producto y Estado',\n                key_suffix='stock_view_1'\n            )\n            if fig_stock:\n                st.plotly_chart(fig_stock, use_container_width=True, key=\"stock_bar_1\")\n\n        with col2:\n            fig_tree = self.generar_grafico_stock(\n                df_filtered, tipo='treemap', titulo='Distribuci√≥n de Stock',\n                key_suffix='stock_view_2'\n            )\n            if fig_tree:\n                st.plotly_chart(fig_tree, use_container_width=True, key=\"stock_tree_1\")\n\n        st.markdown(\"### üìã Detalle de Stock\")\n        st.dataframe(\n            df_filtered[[\n                'Almac√©n','Producto','Lote','Stock','Kg Total','Estado Stock',\n                '% Disponible','Rotaci√≥n'\n            ]],\n            use_container_width=True,\n            height=400\n        )\n\n        st.markdown(\"### üìä Entradas vs. Salidas y % Vendido (por Producto)\")\n        self.generar_grafico_entradas_vs_salidas(df_filtered, key_suffix='stock_view')\n    def ventas_view(self):\n        st.markdown(f\"<h2 style='color: {self.COLOR_SCHEME['text']}; margin-bottom: 20px;'>üí∞ An√°lisis de Ventas</h2>\", \n                    unsafe_allow_html=True)\n\n        ventas = self.df[self.df['movimiento'] == 'SALIDA'].copy()\n        ventas = ventas[ventas['precio'] > 0]\n\n        if ventas.empty:\n            st.warning(\"‚ö†Ô∏è No hay datos de ventas disponibles\")\n            return\n\n        tabs = st.tabs([\"üìä Resumen de Ventas\", \"üë• An√°lisis por Cliente\", \"üìã Detalle de Ventas\"])\n\n        with tabs[0]:\n            total_ventas = ventas['precio total'].sum()\n            total_kg = ventas['kg'].sum()\n            total_cajas = ventas['cajas'].sum()\n            precio_prom = total_ventas / total_kg if total_kg else 0\n\n            metricas = {\n                \"Total Ventas\": total_ventas,\n                \"Total Kg Vendidos\": total_kg,\n                \"Total Cajas Vendidas\": total_cajas,\n                \"Precio Promedio/Kg\": precio_prom\n            }\n            self.mostrar_metricas(metricas)\n\n            st.markdown(\"### üìà Top Ventas por Producto\")\n            col1, col2 = st.columns([3,2])\n            with col1:\n                ventas_prod = ventas.groupby(['nombre','lote']).agg({\n                    'cajas':'sum','kg':'sum','precio total':'sum'\n                }).round(2).sort_values('precio total', ascending=False)\n                ventas_prod['% del Total'] = (ventas_prod['precio total'] / total_ventas * 100).round(2)\n                ventas_prod['Precio/Kg'] = (ventas_prod['precio total'] / ventas_prod['kg']).round(2)\n                st.dataframe(ventas_prod, use_container_width=True, height=400)\n            with col2:\n                fig = px.pie(\n                    ventas_prod.reset_index(),\n                    values='precio total',\n                    names='nombre',\n                    title=\"Distribuci√≥n de Ventas por Producto\",\n                    hole=0.4\n                )\n                fig.update_traces(textposition='inside', textinfo='percent+label')\n                st.plotly_chart(fig, use_container_width=True, key=\"ventas_pie_1\")\n\n        with tabs[1]:\n            st.markdown(\"### üë• An√°lisis por Cliente\")\n            ventas_cliente = ventas.groupby('cliente').agg({\n                'cajas':'sum','kg':'sum','precio total':'sum'\n            }).round(2).sort_values('precio total', ascending=False)\n            ventas_cliente['% del Total'] = (ventas_cliente['precio total'] / total_ventas * 100).round(2)\n            ventas_cliente['Precio/Kg'] = (ventas_cliente['precio total'] / ventas_cliente['kg']).round(2)\n            st.dataframe(ventas_cliente, use_container_width=True)\n\n            st.markdown(\"### üîç Detalle por Cliente\")\n            cliente_sel = st.selectbox(\n                \"Seleccionar Cliente\",\n                options=sorted(ventas['cliente'].dropna().unique()),\n                key=\"ventas_cliente_select\"\n            )\n            if cliente_sel:\n                df_cliente = ventas[ventas['cliente'] == cliente_sel]\n                total_cli = df_cliente['precio total'].sum()\n                kg_cli = df_cliente['kg'].sum()\n\n                metricas_cliente = {\n                    \"Total Compras\": total_cli,\n                    \"Total Kg\": kg_cli,\n                    \"% del Total\": (total_cli/total_ventas*100) if total_ventas else 0,\n                    \"Precio Promedio/Kg\": total_cli/kg_cli if kg_cli>0 else 0\n                }\n                self.mostrar_metricas(metricas_cliente)\n\n                col1, col2 = st.columns(2)\n                with col1:\n                    fig_dist = px.pie(\n                        df_cliente,\n                        values='precio total',\n                        names='nombre',\n                        title=f\"Distribuci√≥n de Compras - {cliente_sel}\",\n                        hole=0.4\n                    )\n                    st.plotly_chart(fig_dist, use_container_width=True, key=f\"cliente_pie_{cliente_sel}\")\n                with col2:\n                    fig_bar = px.bar(\n                        df_cliente,\n                        x='nombre',\n                        y=['cajas','kg'],\n                        title=f\"Cantidades por Producto - {cliente_sel}\",\n                        barmode='group'\n                    )\n                    fig_bar.update_layout(xaxis_tickangle=-45)\n                    st.plotly_chart(fig_bar, use_container_width=True, key=f\"cliente_bar_{cliente_sel}\")\n\n        with tabs[2]:\n            st.markdown(\"### üìã Detalle de Ventas\")\n            col1, col2, col3 = st.columns(3)\n            with col1:\n                cliente_filter = st.multiselect(\n                    \"Filtrar por Cliente\",\n                    options=sorted(ventas['cliente'].dropna().unique()),\n                    key=\"ventas_cliente_filter\"\n                )\n            with col2:\n                producto_filter = st.multiselect(\n                    \"Filtrar por Producto\",\n                    options=sorted(ventas['nombre'].dropna().unique()),\n                    key=\"ventas_producto_filter\"\n                )\n            with col3:\n                vendedor_filter = st.multiselect(\n                    \"Filtrar por Vendedor\",\n                    options=sorted([v for v in ventas['vendedor'].dropna().unique() if str(v).strip()]),\n                    key=\"ventas_vendedor_filter\"\n                )\n\n            df_fil = ventas.copy()\n            if cliente_filter:\n                df_fil = df_fil[df_fil['cliente'].isin(cliente_filter)]\n            if producto_filter:\n                df_fil = df_fil[df_fil['nombre'].isin(producto_filter)]\n            if vendedor_filter:\n                df_fil = df_fil[df_fil['vendedor'].isin(vendedor_filter)]\n\n            st.dataframe(\n                df_fil[[\n                    'nombre','lote','cliente','vendedor',\n                    'cajas','kg','precio','precio total'\n                ]].sort_values(['cliente','nombre']),\n                use_container_width=True,\n                height=400\n            )\n\n    def vista_comercial(self):\n        st.markdown(f\"<h2 style='color: {self.COLOR_SCHEME['text']}; margin-bottom: 20px;'>üéØ Vista Comercial</h2>\", \n                    unsafe_allow_html=True)\n\n        stock_df = self.calcular_stock_actual()\n        if stock_df.empty:\n            st.warning(\"‚ö†Ô∏è No hay datos de Stock para mostrar\")\n            return\n\n        st.markdown(\"### üîç Filtros de An√°lisis\")\n        c1, c2, c3 = st.columns(3)\n        with c1:\n            lote_filter = st.multiselect(\n                \"Filtrar por Lote\",\n                options=sorted(stock_df['Lote'].unique()),\n                key=\"comercial_lote_filter\"\n            )\n        with c2:\n            alm_filter = st.multiselect(\n                \"Filtrar por Almac√©n\",\n                options=sorted(stock_df['Almac√©n'].unique()),\n                key=\"comercial_almacen_filter\"\n            )\n        with c3:\n            est_filter = st.multiselect(\n                \"Filtrar por Estado\",\n                options=sorted(stock_df['Estado Stock'].unique()),\n                key=\"comercial_estado_filter\"\n            )\n\n        df_f = stock_df.copy()\n        if lote_filter:\n            df_f = df_f[df_f['Lote'].isin(lote_filter)]\n        if alm_filter:\n            df_f = df_f[df_f['Almac√©n'].isin(alm_filter)]\n        if est_filter:\n            df_f = df_f[df_f['Estado Stock'].isin(est_filter)]\n\n        tab1, tab2, tab3 = st.tabs([\"üìä Resumen General\", \"üîç Por Producto\", \"üìç Por Almac√©n\"])\n\n        with tab1:\n            metricas = self.calcular_metricas_generales(df_f)\n            self.mostrar_metricas(metricas)\n\n            col1, col2 = st.columns(2)\n            with col1:\n                fig_stock = self.generar_grafico_stock(\n                    df_f, tipo='barras', titulo='Stock por Producto y Estado'\n                )\n                if fig_stock:\n                    st.plotly_chart(fig_stock, use_container_width=True, key=\"comercial_bar_1\")\n\n            with col2:\n                fig_tree = self.generar_grafico_stock(\n                    df_f, tipo='treemap', titulo='Distribuci√≥n de Stock'\n                )\n                if fig_tree:\n                    st.plotly_chart(fig_tree, use_container_width=True, key=\"comercial_tree_1\")\n\n            st.markdown(\"#### üìä Entradas vs. Salidas y % Vendido (por Producto)\")\n            self.generar_grafico_entradas_vs_salidas(df_f, key_suffix='comercial_view')\n\n        with tab2:\n            st.markdown(\"### üîç An√°lisis Detallado por Producto\")\n            prod_sel = st.selectbox(\n                \"Seleccionar Producto\",\n                options=sorted(df_f['Producto'].unique()),\n                key=\"comercial_producto_select\"\n            )\n            if prod_sel:\n                df_prod = df_f[df_f['Producto'] == prod_sel]\n                metricas_prod = {\n                    \"Stock Total\": df_prod['Stock'].sum(),\n                    \"Kg Totales\": df_prod['Kg Total'].sum(),\n                    \"Ventas Totales ($)\": df_prod['Ventas Total'].sum(),\n                    \"Rotaci√≥n (%)\": df_prod['Rotaci√≥n'].mean()\n                }\n                self.mostrar_metricas(metricas_prod)\n\n                st.markdown(\"#### üìã Detalle por Almac√©n y Lote\")\n                st.dataframe(\n                    df_prod[[\n                        'Almac√©n','Lote','Stock','Kg Total','Total Inicial',\n                        'Salidas','% Vendido','% Disponible','Estado Stock'\n                    ]].sort_values(['Almac√©n','Lote']),\n                    use_container_width=True\n                )\n\n                c1, c2 = st.columns(2)\n                with c1:\n                    fig_pie = px.pie(\n                        df_prod,\n                        values='Stock',\n                        names='Almac√©n',\n                        title=f\"Distribuci√≥n por Almac√©n - {prod_sel}\",\n                        hole=0.4\n                    )\n                    st.plotly_chart(fig_pie, use_container_width=True, key=f\"comercial_prod_pie_{prod_sel}\")\n                with c2:\n                    fig_bar = px.bar(\n                        df_prod,\n                        x='Lote',\n                        y=['Stock','Salidas'],\n                        title=f\"Stock vs Salidas - {prod_sel}\",\n                        barmode='group'\n                    )\n                    st.plotly_chart(fig_bar, use_container_width=True, key=f\"comercial_prod_bar_{prod_sel}\")\n\n        with tab3:\n            st.markdown(\"### üìç An√°lisis Detallado por Almac√©n\")\n            alm_sel = st.selectbox(\n                \"Seleccionar Almac√©n\",\n                options=sorted(df_f['Almac√©n'].unique()),\n                key=\"comercial_almacen_select\"\n            )\n            if alm_sel:\n                df_alm = df_f[df_f['Almac√©n'] == alm_sel]\n                metricas_alm = {\n                    \"Total Productos\": len(df_alm['Producto'].unique()),\n                    \"Stock Total\": df_alm['Stock'].sum(),\n                    \"Productos Cr√≠ticos\": len(df_alm[df_alm['Estado Stock'] == 'CR√çTICO'])\n                }\n                self.mostrar_metricas(metricas_alm, 3)\n\n                st.markdown(\"#### üìä Estado de Stock por Producto\")\n                resumen_stock = df_alm.groupby('Producto').agg({\n                    'Stock': 'sum',\n                    'Kg Total': 'sum',\n                    'Total Inicial': 'sum',\n                    'Salidas': 'sum',\n                    '% Vendido': 'mean',\n                    '% Disponible': 'mean'\n                }).round(2).reset_index()\n\n                def definir_estado(stock_val):\n                    for est, cfg in self.ESTADOS_STOCK.items():\n                        if stock_val <= cfg['umbral']:\n                            return est\n                    return 'NORMAL'\n\n                resumen_stock['Estado'] = resumen_stock['Stock'].apply(definir_estado)\n\n                st.dataframe(\n                    resumen_stock.sort_values('Stock', ascending=False),\n                    use_container_width=True\n                )\n\n                c1, c2 = st.columns(2)\n                with c1:\n                    fig_stock_alm = px.bar(\n                        df_alm,\n                        x='Producto',\n                        y='Stock',\n                        color='Estado Stock',\n                        title=f\"Stock por Producto - {alm_sel}\"\n                    )\n                    fig_stock_alm.update_layout(xaxis_tickangle=-45)\n                    st.plotly_chart(fig_stock_alm, use_container_width=True, key=f\"comercial_alm_bar_{alm_sel}\")\n                \n                with c2:\n                    fig_estados = px.pie(\n                        df_alm,\n                        names='Estado Stock',\n                        values='Stock',\n                        title=f\"Distribuci√≥n por Estado - {alm_sel}\",\n                        hole=0.4\n                    )\n                    st.plotly_chart(fig_estados, use_container_width=True, key=f\"comercial_alm_pie_{alm_sel}\")\n\n    def run_dashboard(self):\n        st.markdown(f\"\"\"\n            <h1 style='text-align: center; color: {self.COLOR_SCHEME['primary']}; padding: 1rem 0;'>\n                üì¶ Dashboard de Inventario COHESA\n            </h1>\n        \"\"\", unsafe_allow_html=True)\n\n        with st.sidebar:\n            st.markdown(\"### ‚öôÔ∏è Control del Dashboard\")\n            st.write(\"üïí √öltima actualizaci√≥n:\", datetime.now().strftime(\"%H:%M:%S\"))\n\n            if st.button('üîÑ Actualizar Datos', key=\"refresh_button\"):\n                st.cache_data.clear()\n                st.rerun()\n\n        if not self.load_data():\n            st.error(\"‚ùå Error al cargar los datos\")\n            return\n\n        tab1, tab2, tab3 = st.tabs([\"üìä Stock\", \"üí∞ Ventas\", \"üéØ Vista Comercial\"])\n\n        with tab1:\n            self.stock_view()\n\n        with tab2:\n            self.ventas_view()\n\n        with tab3:\n            self.vista_comercial()\n\n\n# -----------------------------------------------------------------------------\n#                   4) Punto de entrada: Ejecutar el Dashboard\n# -----------------------------------------------------------------------------\nif __name__ == '__main__':\n    dashboard = InventarioDashboard()\n    dashboard.run_dashboard()\n",
  "requirements.txt": "streamlit\npandas\nplotly\ngoogle-api-python-client\ngoogle-auth-httplib2\ngoogle-auth-oauthlib"
}